library("ggplots")
library("ggplots")
library("ggplot2")
library(reshape2)
library(gridExtra)
data<-data.table::fread("~/Desktop/consulta-sin-restricciones.csv")
data$mes <- factor(data$mes, levels=c("ENERO","FEBRERO","MARZO","ABRIL","MAYO","JUNIO","JULIO","AGOSTO","SEPTIEMBRE","OCTUBRE","NOVIEMBRE","DICIEMBRE"))
data$behaviour<-data$generated_energy/data$expected_energy
dat<-melt(data,id.vars=c("mes","year","plant_id","nupe"),measure.vars=c("expected_energy", "generated_energy","behaviour"))
dat.behaviour<-melt(data,id.vars=c("mes","year","plant_id","nupe"),measure.vars=c("behaviour"))
p<-ggplot(dat, aes(x=mes, y=value, color=variable)) +
geom_boxplot() +
geom_jitter()+ theme(axis.text.x = element_text(angle = 90, hjust = 1))+
facet_grid(. ~ year)
p
p<-ggplot(subset(dat.behaviour,value<2), aes(x=mes, y=value)) +
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+ ylab("generated energy/ expected energy")+
facet_grid(. ~ year)+ ggtitle("Comportamiento de plantas (2017-2019)") +geom_hline(yintercept=1,color='coral')
p
p.violin<-ggplot(subset(dat.behaviour,value<2), aes(x=mes, y=value)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+ ylab("generated energy/ expected energy")+
facet_grid(. ~ year)+ ggtitle("Comportamiento de plantas (2017-2019)") +geom_hline(yintercept=1,color='coral')+geom_violin()
means <- aggregate(value ~  mes, dat.behaviour, mean)
p+stat_summary(fun.y=mean, colour="darkred", geom="point",
shape=18, size=3,show.legend = TRUE)
head(data)
data$nupe
strsplit(data$nupe,"_")
for(i in data$nupe){strsplit(i,"_")}
localization=c();for(i in data$nupe){localization<-c(localization,strsplit(i,"_")[3])}
localization
localization=c();for(i in data$nupe){localization<-c(localization,strsplit(i,"_")[3])}
strsplit(i,"_"
)
unlist(strsplit(i,"_"))
unlist(strsplit(i,"_"))[3]
localization=c();for(i in data$nupe){localization<-c(localization,unlist(strsplit(i,"_"))[3])}
localization
localization=c();for(i in data$nupe){localization<-c(localization,tail(unlist(strsplit(i,"_")),n=1)}
localization=c();for(i in data$nupe){localization<-c(localization,tail(unlist(strsplit(i,"_")),n=1))}
localization
table(localization)
localization=c();for(i in data$nupe){localization<-c(localization,tail(unlist(strsplit(i,"[\\_\\-]+")),n=1))}
localization
table(localization)
data$localization=localization
length(localization)
dim(data)
localization=c();for(i in data$nupe){if(nchar(i)>0){localization<-c(localization,tail(unlist(strsplit(i,"_")),n=1))}else(localization<-c(localization,"NA"))}
localization=c();for(i in data$nupe){if(nchar(i)>0){localization<-c(localization,tail(unlist(strsplit(i,"_")),n=1))}else(localization<-c(localization,"NA"))}
i
nchar(i)
length(i)
typeof(i)
nchar(i)
tail(unlist(strsplit(i,"_")),n=1)
i=0;localization=c();for(i in data$nupe){localization<-c(localization,tail(unlist(strsplit(i,"[\\_\\-]+")),n=1));i=i+1}
j=0;localization=c();for(i in data$nupe){localization<-c(localization,tail(unlist(strsplit(i,"[\\_\\-]+")),n=1));j=j+1}
j
dim(data)
length(localization)
data$nupe
table(data$nupe)
data$localization
data$localization<-NA
j=0;localization=c();for(i in data$nupe){j=j+1;data$localization[j]=tail(unlist(strsplit(i,"[\\_\\-]+")),n=1)}
j
data$localization[i]
data$nupe[i]
j=0;localization=c();for(i in data$nupe){j=j+1;if(i!=NA){data$localization[j]=tail(unlist(strsplit(i,"[\\_\\-]+")),n=1)}}
j=0;localization=c();for(i in data$nupe){j=j+1;if(i!="NA"){data$localization[j]=tail(unlist(strsplit(i,"[\\_\\-]+")),n=1)}}
i
i
j
data$nupe
data$nupe[i]
data$nupe[j]
j=0;localization=c();for(i in data$nupe){j=j+1;if(i!=""){data$localization[j]=tail(unlist(strsplit(i,"[\\_\\-]+")),n=1)}}
j
data$localization
table(data$localization)
dat<-melt(data,id.vars=c("mes","year","plant_id","nupe","localization"),measure.vars=c("expected_energy", "generated_energy","behaviour"))
dat.behaviour<-melt(data,id.vars=c("mes","year","plant_id","nupe","localization"),measure.vars=c("behaviour"))
#Gráfica de cajas y bigotes (boxplot del comportamiento)
p<-ggplot(subset(dat.behaviour,value<2), aes(x=mes, y=value)) +
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+ ylab("generated energy/ expected energy")+
facet_grid(. ~ year)+ ggtitle("Comportamiento de plantas (2017-2019)") +geom_hline(yintercept=1,color='coral')
p
#Gráfica de cajas y bigotes (boxplot del comportamiento)
p<-ggplot(subset(dat.behaviour,value<2), aes(x=mes, y=value)) +
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+ ylab("generated energy/ expected energy")+
facet_grid(localization ~ year)+ ggtitle("Comportamiento de plantas (2017-2019)") +geom_hline(yintercept=1,color='coral')
p
data$nupe
table(data$localization)
table(data$localization,useNA = TRUE)
table(data$localization,useNA = T)
table(data$localization,useNA )
table(data$localization,useNA = T )
table(data$localization,useNA =  )
?table
table(data$localization,useNA = "always")
#Gráfica de cajas y bigotes (boxplot del comportamiento)
p<-ggplot(subset(dat.behaviour,value<2), aes(x=mes, y=value)) +
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+ ylab("generated energy/ expected energy")+
facet_grid(localization ~ year)+ ggtitle("Comportamiento de plantas (2017-2019)") +geom_hline(yintercept=1,color='coral')
p
subset(data,localization==NA)
subset(data,localization=="NA")
subset(data,localization="NA")
subset(data,localization="NULL")
subset(data,localization=NA)
data$nupe
c(data$nupe,data$localization)
cbind(data$nupe,data$localization)
data[338,]
data[338,"nupe"]
strsplit(data[338,"nupe"],"_")
strsplit(unlist(data[338,"nupe"]),"_")
Sys.setlocale('LC_ALL','C')
strsplit(unlist(data[338,"nupe"]),"_")
localization=c();for(i in data$nupe){localization<-c(localization,tail(unlist(strsplit(i,"[\\_\\-]+")),n=1))}
length(localization)
dim(data)
table(localization)
data<-data.table::fread("~/Desktop/consulta-sin-restricciones.csv")
data<-data.table::fread("~/Desktop/consulta-sin-restricciones.csv")
data<-data.table::fread("~/Desktop/consulta-sin-restricciones.csv")
data<-data.table::fread("~/Desktop/consulta-sin-restricciones.csv")
data<-data.table::fread("~/Desktop/consulta-sin-restricciones.csv")
data<-data.table::fread("~/Desktop/consulta-sin-restricciones.csv")
data<-data.table::fread("~/Desktop/consulta-sin-restricciones.csv")
data<-data.table::fread("~/Desktop/consulta-sin-restricciones.csv")
data<-data.table::fread("~/Desktop/consulta-sin-restricciones.csv")
data$mes <- factor(data$mes, levels=c("ENERO","FEBRERO","MARZO","ABRIL","MAYO","JUNIO","JULIO","AGOSTO","SEPTIEMBRE","OCTUBRE","NOVIEMBRE","DICIEMBRE"))
data$behaviour<-data$generated_energy/data$expected_energy
dat<-melt(data,id.vars=c("mes","year","plant_id","nupe","localization"),measure.vars=c("expected_energy", "generated_energy","behaviour"))
dat.behaviour<-melt(data,id.vars=c("mes","year","plant_id","nupe","localization"),measure.vars=c("behaviour"))
#Gráfica de cajas y bigotes (boxplot del comportamiento)
p<-ggplot(subset(dat.behaviour,value<2), aes(x=mes, y=value)) +
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+ ylab("generated energy/ expected energy")+
facet_grid(localization ~ year)+ ggtitle("Comportamiento de plantas (2017-2019)") +geom_hline(yintercept=1,color='coral')
p
table(data$localization)
#Stock Prophet
#install.packages("prophet")
library(prophet)
library(reshape)
#Stock Prophet
#install.packages("prophet")
install.packages("crypto")
library(crypto)
?getCoins
library(crypto)
secret <- rstudioapi::askForSecret("Test")
crypto::repair_dependencies()
#Stock Prophet
#install.packages("prophet")
install.packages("rstudioapi")
install.packages("rstudioapi")
crypto::repair_dependencies()
library(crypto)
will_i_get_rich <- crypto_history(limit=50)
will_i_get_rich
rich_list <- crypto_list()
rich_list
rich_list
am_i_rich_now <- crypto_prices()
where_do_i_get_rich <- crypto_exchanges()
cryptocoin<-<- crypto_history("kin")
cryptocoin<- crypto_history("kin")
cryptocoin<- crypto_history("xlm")
cryptocoin
df<-cryptocoin[,c(4:6)]
df.melt<-melt(df)
library(reshape)
df.melt<-melt(df)
df<-cryptocoin[,c(4,6)]
df.melt<-melt(df)
head(df)
df.melt<-melt(df,id.vars = "date")
df.melt
head(cryptocoin)
df<-cryptocoin[,c(4,6:9)]
df.melt<-melt(df)
df.melt<-melt(df,id.vars = "date")
df.melt<-df.melt[,-2]
colnames(df.melt)<-c("ds","y")
##Starting Prophet
m <- prophet(df.melt,daily.seasonality = TRUE)
library(prophet)
##Starting Prophet
m <- prophet(df.melt,daily.seasonality = TRUE)
future <- make_future_dataframe(m, periods = 7)
tail(future)
forecast <- predict(m, future)
tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
plot(m, forecast)
tail(df.melt)
prophet_plot_components(m, forecast)
cryptocoin<- crypto_history("btc")
df<-cryptocoin[,c(4,6:9)]
df.melt<-melt(df,id.vars = "date")
df.melt<-df.melt[,-2]
colnames(df.melt)<-c("ds","y")
##Starting Prophet
m <- prophet(df.melt,daily.seasonality = TRUE)
#Crea un vector de fechas futuras
future <- make_future_dataframe(m, periods = 7)
#Predicción de la crypto currency
forecast <- predict(m, future)
tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
plot(m, forecast)
prophet_plot_components(m, forecast)
plot(m, forecast) + add_changepoints_to_plot(m)
crypto_prices("xml")
crypto_prices("xlm")
crypto_prices()
crypto_prices("stellar")
library(vegan)
data(BCI)
BCI
typeof(BCI)
H <- diversity(BCI)
H
> Srar <- rarefy(BCI, min(rowSums(BCI)
Srar <- rarefy(BCI, min(rowSums(BCI)
)
)
rowSums(BCI)
Srar
S2 <- rarefy(BCI, 2
)
S2
crypto_prices("stellar")
crypto_prices("stellar")
df<-data.table::fread("~/Downloads/resultados/result.tsv")
df
head(df)
dim(df)
df$METLIN
grep("",df$METLIN)
grep("",df$METLIN)
df$METLIN_MSMS
df$name
df2<-data.table::fread("~/Downloads/resultados_2doGenoma/result.tsv")
df2$name
sum(df2$name%in%df$name)
dim(df2)
df_k155<-data.table::fread("~/Downloads/results_K155/result.tsv")
df_l06<-data.table::fread("~/Downloads/results_L06/result.tsv")
df_l06[9790,]
df_l06[9789,]
df_nf3<-data.table::fread("~/Downloads/results_NF3/result.tsv")
df_tfc3<-data.table::fread("~/Downloads/results_TFC3/result.tsv")
require(venneuler)
install.packages("venneuler")
install.packages("UpSetR")
lista=list(K155=df_k155$name,L06=df_l06$name,NF3=df_nf3$name,TFC3=df_tfc3$name)
library(UpSetR)
upset(fromList(lista), order.by = "freq")
upset(fromList(lista), order.by = "freq",queries = list(list(query=intersects,params=list("K155","L06"))))
upset(fromList(lista), order.by = "freq",queries = list(list(query=intersects,params=list("K155","L06"))))->a
a
upset(fromList(lista), order.by = "freq",queries = list(list(query=intersects,params=list("K155","L06"))))
Intersect <- function (x) {
# Multiple set version of intersect
# x is a list
if (length(x) == 1) {
unlist(x)
} else if (length(x) == 2) {
intersect(x[[1]], x[[2]])
} else if (length(x) > 2){
intersect(x[[1]], Intersect(x[-1]))
}
}
Union <- function (x) {
# Multiple set version of union
# x is a list
if (length(x) == 1) {
unlist(x)
} else if (length(x) == 2) {
union(x[[1]], x[[2]])
} else if (length(x) > 2) {
union(x[[1]], Union(x[-1]))
}
}
Setdiff <- function (x, y) {
# Remove the union of the y's from the common x's.
# x and y are lists of characters.
xx <- Intersect(x)
yy <- Union(y)
setdiff(xx, yy)
}
ombs <-
unlist(lapply(1:length(xx.1),
function(j) combn(names(xx.1), j, simplify = FALSE)),
recursive = FALSE)
names(combs) <- sapply(combs, function(i) paste0(i, collapse = ""))
str(combs)
xx.1<-lista
combs <-
unlist(lapply(1:length(xx.1),
function(j) combn(names(xx.1), j, simplify = FALSE)),
recursive = FALSE)
names(combs) <- sapply(combs, function(i) paste0(i, collapse = ""))
str(combs)
elements <-
lapply(combs, function(i) Setdiff(xx.1[i], xx.1[setdiff(names(xx.1), i)]))
n.elements <- sapply(elements, length)
print(n.elements)
elements
subset(df_k155,name=elements$K155)
dim(subset(df_k155,name=elements$K155))
dim(df_k155)
dim(subset(df_k155,name==elements$K155))
dim(subset(df_k155,name%in%elements$K155))
write.csv("~/Desktop/K155.csv",subset(df_k155,name%in%elements$K155),quote=FALSE)
write.csv(file = "~/Desktop/K155.csv",subset(df_k155,name%in%elements$K155),quote=FALSE)
for(i in elements){print(i)}
for(i in elements){print(i)}
i
names(elements)
names(elements)[1]
elements$names(elements)[1]
elements$get(names(elements)[1])
elements[1]
elements[2]
elements[3]
elements[3]
for(i in 1:len(names(elements))){nombre=names(elements)[i]}
for(i in 1:length(names(elements))){nombre=names(elements)[i]}
names(elements)[1]
names(elements)
write.csv(file = "~/Desktop/L06.csv",subset(df_l06,name%in%elements$L06),quote=FALSE)
write.csv(file = "~/Desktop/NF3.csv",subset(df_nf3,name%in%elements$NF3),quote=FALSE)
write.csv(file = "~/Desktop/TFC3.csv",subset(df_tfc3,name%in%elements$TFC3),quote=FALSE)
write.csv(file = "~/Desktop/K155-L06.csv",subset(df_k155,name%in%elements$K155L06),quote=FALSE)
write.csv(file = "~/Desktop/K155-NF3.csv",subset(df_k155,name%in%elements$K155NF3),quote=FALSE)
write.csv(file = "~/Desktop/K155-TFC3.csv",subset(df_k155,name%in%elements$K155TFC3),quote=FALSE)
write.csv(file = "~/Desktop/L06-NF3.csv",subset(df_l06,name%in%elements$L06NF3),quote=FALSE)
write.csv(file = "~/Desktop/L06-NF3.csv",subset(df_l06,name%in%elements$L06NF3),quote=FALSE,sep="\t")
write.csv(file = "~/Desktop/L06-NF3.csv",subset(df_l06,name%in%elements$L06NF3),quote=FALSE,sep ="\t")
write.table(file = "~/Desktop/L06-NF3.csv",subset(df_l06,name%in%elements$L06NF3),quote=FALSE,sep ="\t")
write.table(file = "~/Desktop/L06-NF3.tsv",subset(df_l06,name%in%elements$L06NF3),quote=FALSE,sep ="\t")
write.csv(file = "~/Desktop/L06-NF3.csv",subset(df_l06,name%in%elements$L06NF3),quote=FALSE,sep ="\t")
write.csv(file = "~/Desktop/L06-NF3.csv",subset(df_l06,name%in%elements$L06NF3),quote=FALSE)
names(elements)
write.csv(file = "~/Desktop/L06-TFC3.csv",subset(df_l06,name%in%elements$L06TFC3),quote=FALSE)
write.csv(file = "~/Desktop/NF3-TFC3.csv",subset(df_nf3,name%in%elements$NF3TFC3),quote=FALSE)
write.csv(file = "~/Desktop/K155-L06-NF3-TFC3.csv",subset(df_nf3,name%in%elements$K155L06NF3TFC3),quote=FALSE)
history()
library(prophet)
library(reshape)
library(crypto)
setwd("~/Github/Tools/Stock/")
cryptocoin<- crypto_history("xlm")
df<-cryptocoin[,c(4,6:9)]
df.melt<-melt(df,id.vars = "date")
df.melt<-df.melt[,-2]
colnames(df.melt)<-c("ds","y")
##Starting Prophet
m <- prophet(df.melt,daily.seasonality = TRUE)
#Crea un vector de fechas futuras
future <- make_future_dataframe(m, periods = 7)
#Predicción de la crypto currency
forecast <- predict(m, future)
tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
plot(m, forecast)
prophet_plot_components(m, forecast)
plot(m, forecast) + add_changepoints_to_plot(m)
plot(m, forecast) + add_changepoints_to_plot(m)
prophet_plot_components(m, forecast)
crypto::crypto_prices()
crypto::crypto_prices("xlm")
crypto::crypto_prices("stellar")
prophet_plot_components(m, forecast)
tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
plot(m, forecast)
